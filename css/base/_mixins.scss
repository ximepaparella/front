@import "./variables";


//=======================================
// MIXIN COLUMNAS
//=======================================

@mixin columns($name, $start, $end) {
  @for $i from $start through $end {
    .col-#{$name}#{$i} {
      -ms-flex: 0 0 $col-width * $i * 1%;
      flex: 0 0 $col-width * $i * 1%;
      max-width: $col-width * $i * 1%;
    }
  }
}

//=======================================
// MIXIN ORDERS
//=======================================

@mixin orders($name, $start, $end) {
  @for $i from $start through $end {
    .order-#{$name}#{$i} {
      -ms-flex-order: $i;
      order: $i;
    }
  }
}

//=======================================
// MIXIN OFFSETS
//=======================================

@mixin offsets($name, $start, $end) {
  @for $i from $start through $end {
    .offset-#{$name}#{$i} {
      margin-left: $col-width * $i * 1%;
    }
  }
}


//=======================================
// MIXIN TRANSFORM
//=======================================
@mixin transform($eje, $valor) {
  //Sólo agregamos el "@include transform($eje, $valor);"
  $num: "(#{$valor})";
  -webkit-transform: translate#{$eje}#{$num};
  -moz-transform: translate#{$eje}#{$num};
  -ms-transform: translate#{$eje}#{$num};
  transform: translate#{$eje}#{$num};
}

//=======================================
// MIXIN TAMAÑOS DE FUENTES
//=======================================

@mixin textsize($size, $line) {
  font-size: px($size);
  line-height: px($line);
}

//=======================================
// MIXIN GRID REPEDITOS o ÚNICOS
//=======================================

$guion : '-';
@mixin grid-repeat($col, $screen:false) {
    @if $screen {
        .grid-#{$screen}#{$guion}#{$col}{
            grid-template-columns: repeat($col, 1fr);
            grid-template-rows: auto;
        }
    }@else {
        .grid-#{$col}{
            grid-template-columns: repeat($col, 1fr);
            grid-template-rows: auto;
        }
    }
}
@mixin grid-repeat-gap($col, $screen:false) {
    @if $screen {
        .grid-#{$screen}#{$guion}#{$col}{
            grid-template-columns: repeat($col, 1fr);
            grid-template-rows: auto;
        }
    }@else {
        .grid-#{$col}{
            grid-template-columns: repeat($col, 1fr);
            grid-template-rows: auto;
        }
    }
}
@mixin grid-norepeat($col, $fr1:null, $fr2:null, $fr3:null, $fr4:null, $screen:false){
    @if $screen {
        .grid-#{$screen}#{$guion}#{$col}{
            grid-template-columns: $fr1 $fr2 $fr3 $fr4;
            grid-template-rows: auto;
        }
    }@else {
        .grid-#{$col}{
            grid-template-columns: $fr1 $fr2 $fr3 $fr4;
            grid-template-rows: auto;
        }
    }
}
@mixin grid-norepeat-gap($col, $fr1:null, $fr2:null, $fr3:null, $fr4:null, $screen:false){
    @if $screen {
        .grid-#{$screen}#{$guion}#{$col}-gap{
            grid-template-columns: $fr1 $fr2 $fr3 $fr4;
            grid-template-rows: auto;
        }
    }@else {
        .grid-#{$col}-gap{
            grid-template-columns: $fr1 $fr2 $fr3 $fr4;
            grid-template-rows: auto;
        }
    }
}